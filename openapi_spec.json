{
  "openapi": "3.0.3",
  "info": {
    "title": "Go Event Store - OpenAPI 3.0",
    "description": "This is a serverless Event Store implementation written in Go and running on AWS infrastructure.\n\nSome useful links:\n- [Go Event Store repository](https://github.com/ilia-tolliu-go-event-store)",
    "contact": {
      "email": "im.tollu@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more",
    "url": "https://github.com/ilia-tolliu-go-event-store"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "paths": {
    "/liveness-check": {
      "get": {
        "summary": "Check if the system is up and running",
        "responses": {
          "200": {
            "description": "System is Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemStatus"
                }
              }
            }
          }
        }
      }
    },
    "/streams/{streamType}": {
      "post": {
        "tags": [
          "stream"
        ],
        "summary": "Create new stream with initial event",
        "parameters": [
          {
            "name": "streamType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "test-stream-type"
            }
          }
        ],
        "requestBody": {
          "description": "Initial event",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "initialEvent": {
                    "$ref": "#/components/schemas/NewEvent"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Stream with initial event is successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "stream": {
                      "$ref": "#/components/schemas/Stream"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "stream"
        ],
        "summary": "Get streams of specific type",
        "parameters": [
          {
            "name": "streamType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "test-stream-type"
            }
          },
          {
            "name": "updated-after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2025-01-25T10:11:12Z"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Streams successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "streamPage": {
                      "$ref": "#/components/schemas/StreamPage"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/streams/{streamType}/{streamId}/details": {
      "get": {
        "tags": [
          "stream"
        ],
        "summary": "Get stream details",
        "parameters": [
          {
            "name": "streamType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "test-stream-type"
            }
          },
          {
            "name": "streamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "436173ec-5cd9-474d-b488-b54327628343"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stream with given type and id is found, here are the details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "stream": {
                      "$ref": "#/components/schemas/Stream"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/streams/{streamType}/{streamId}/events/{streamRevision}": {
      "put": {
        "tags": [
          "event"
        ],
        "summary": "Append new event to stream",
        "parameters": [
          {
            "name": "streamType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "test-stream-type"
            }
          },
          {
            "name": "streamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "436173ec-5cd9-474d-b488-b54327628343"
            }
          },
          {
            "name": "streamRevision",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 123
            }
          }
        ],
        "requestBody": {
          "description": "New event to append",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event": {
                    "$ref": "#/components/schemas/NewEvent"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event successfully appended to stream",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "stream": {
                      "$ref": "#/components/schemas/Stream"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Trying to append event of inconsistent revision. If a stream has revision N, you only can append event with revision N+1"
          }
        }
      }
    },
    "/streams/{streamType}/{streamId}/events": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "Get stream events in order",
        "parameters": [
          {
            "name": "streamType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "test-stream-type"
            }
          },
          {
            "name": "streamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "436173ec-5cd9-474d-b488-b54327628343"
            }
          },
          {
            "name": "after-revision",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 123
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Events successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "eventPage": {
                      "$ref": "#/components/schemas/EventPage"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SystemStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the system",
            "example": "ok"
          },
          "at": {
            "type": "string",
            "description": "Time of the liveness check",
            "format": "date-time"
          }
        }
      },
      "NewEvent": {
        "type": "object",
        "properties": {
          "eventType": {
            "type": "string",
            "description": "Type of event. It is used to know how to parse event payload when reading.",
            "example": "something-important-happened"
          },
          "payload": {
            "type": "object",
            "example": {
              "name": "test name"
            }
          }
        },
        "required": [
          "eventType",
          "payload"
        ]
      },
      "Event": {
        "type": "object",
        "properties": {
          "streamId": {
            "type": "string",
            "description": "stream id",
            "format": "uuid",
            "example": "c72e01a7-e74a-4a86-ab20-2aabe206b3ce"
          },
          "revision": {
            "type": "integer",
            "description": "number of the event in the stream",
            "example": 123
          },
          "eventType": {
            "type": "string",
            "description": "Type of event. It is used to know how to parse event payload when reading.",
            "example": "something-important-happened"
          },
          "payload": {
            "type": "object",
            "example": {
              "name": "test name"
            }
          },
          "createdAt": {
            "description": "Timestamp when the event was created.",
            "type": "string",
            "format": "date-time",
            "example": "2025-02-24T08:49:00Z"
          }
        },
        "required": [
          "streamId",
          "revision",
          "eventType",
          "payload",
          "createdAt"
        ]
      },
      "Stream": {
        "type": "object",
        "properties": {
          "streamId": {
            "type": "string",
            "description": "stream id",
            "format": "uuid",
            "example": "c72e01a7-e74a-4a86-ab20-2aabe206b3ce"
          },
          "streamType": {
            "type": "string",
            "description": "Type of an entity that is modeled by this stream. This defines which types of events it may contain. And also may be used to authorize access.",
            "example": "test-entity"
          },
          "revision": {
            "description": "Stream revision. This number means how many events does this stream have. To append an event to the stream, you'll need to pass revision + 1 as a parameter. This means that you base your decition to append an event on the latest state of the stream.",
            "type": "integer",
            "format": "int32",
            "example": 123
          },
          "updatedAt": {
            "description": "Timestamp when the stream was updated. I.e. time of the latest event of the stream.",
            "type": "string",
            "format": "date-time",
            "example": "2025-02-23T12:37:00Z"
          }
        },
        "required": [
          "streamId",
          "streamType",
          "revision",
          "updatedAt"
        ]
      },
      "EventPage": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "hasMore": {
            "description": "There are more events in the stream.",
            "type": "boolean"
          },
          "lastEvaluatedRevision": {
            "description": "Use this number as after-revision query parameter to query the next page."
          }
        },
        "required": [
          "events",
          "hasMore"
        ]
      },
      "StreamPage": {
        "type": "object",
        "properties": {
          "streams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Stream"
            }
          },
          "hasMore": {
            "description": "There are more streams in the result.",
            "type": "boolean"
          },
          "nextPageKey": {
            "description": "Use this key as stream-next-page-key query parameter to query the next page."
          }
        },
        "required": [
          "streams",
          "hasMore"
        ]
      }
    }
  }
}